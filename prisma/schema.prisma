// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID              Int                  @id @default(autoincrement())
  username            String               @unique
  avatarImage         String               @default("")
  password            String
  email               String               @unique
  firstName           String
  lastName            String
  location            String
  preferredLanguage   String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  FinancialAccounts   FinancialAccount[]
  FinancialGoals      FinancialGoal[]
  ChatbotInteractions ChatbotInteraction[]
  Conversations       Conversation[]
}

model FinancialAccount {
  accountId    Int           @id @default(autoincrement())
  accountName  String
  accountType  String
  balance      Float
  currency     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [userID])
  userId       Int
}

model FinancialGoal {
  goalId       Int      @id @default(autoincrement())
  goalName     String
  targetAmount Float
  currentAmount Float
  currency     String
  startDate    DateTime
  endDate      DateTime?
  progress     Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userID])
  userId       Int
}

model ChatbotInteraction {
  id           Int      @id @default(autoincrement())
  conversationId Int
  prompt       String
  response     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userID])
  userId       Int
  Conversation Conversation @relation(fields: [conversationId], references: [conversationId])
}

model Conversation {
  conversationId Int                   @id @default(autoincrement())
  userId         Int
  user           User                  @relation(fields: [userId], references: [userID])
  ChatbotInteractions ChatbotInteraction[]
}

model Article {
  resourceId    Int      @id @default(autoincrement())
  title         String
  content       String
  type          String
  language      String
  tags          String[]
  datePublished String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
